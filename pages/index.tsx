import Head from "next/head";
import Layout, { siteTitle } from "../components/Layout";
import { getSortedPostsData, File } from "../lib/files";
import styles from "../styles/Home.module.css";
import Card from "../components/Card";
import { useState } from "react";
import Button from "../components/Button";
import DownIcon from "../public/chevronDown.svg";
import PlusIcon from "../public/plusIcon.svg";
import DownloadIcon from "../public/downloadIcon.svg";
import TrashIcon from "../public/trashIcon.svg";
import { useCardSelection } from "../hooks/useCardVisibility";
import SelectedCard from "../components/SelectedCard";

interface AllPostDataProps {
  allPostsData: File[];
}

export async function getStaticProps() {
  const allPostsData = getSortedPostsData();
  return {
    props: {
      allPostsData,
    },
  };
}

const Home = ({ allPostsData }: AllPostDataProps) => {
  const [search, setSearch] = useState<string[]>([]);
  const [selectedCard, setSelectedCard] = useState<string[]>([]);
  const [selectedMode, setSelectedMode] = useState<boolean>(false);

  const { selected, setSelected, setNoneSelected } = useCardSelection();

  // search by title
  const searchedLink = [...allPostsData].filter((data) => {
    return search.length === 0
      ? true
      : search.every((characters: string) =>
          data.title.toLowerCase().includes(characters.toLowerCase())
        );
  });

  // save selected cards
  const onSelected = (id: string) => {
    if (selectedCard.length === 0) {
      setSelectedCard([...selectedCard, id]);
      setSelectedMode(!selectedMode);
    } else {
      if (selectedCard.includes(id)) {
        setSelectedCard([...removeArrayElement(selectedCard, id)]);
      } else {
        setSelectedCard([...selectedCard, id]);
      }
    }
  };
  console.log(selectedCard);

  function removeArrayElement(array: string[], element: string): string[] {
    return array.filter((item) => item !== element);
  }

  // return unSelected mode
  const onCancel = () => {
    setSelectedMode(!selectedMode);
    setSelectedCard([]);
  };

  const abc = () => {};

  return (
    <Layout home>
      <>
        <Head>
          <title>{siteTitle}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div className={styles.grid_container}>
          <div className={styles.title_container}>
            {selectedMode ? (
              <div className={styles.buttonsContainer}>
                <Button
                  text="Download selected"
                  icon={DownloadIcon}
                  className={styles.download}
                  onClick={abc}
                />
                <Button
                  text="Delete"
                  icon={TrashIcon}
                  className={styles.delete}
                  onClick={abc}
                />
                <Button
                  text="Cancel"
                  icon={PlusIcon}
                  className={styles.cancel}
                  onClick={onCancel}
                />
              </div>
            ) : (
              <div className={styles.buttonContainer}>
                <Button
                  text="Upload"
                  icon={DownIcon}
                  className={styles.upload}
                  onClick={abc}
                />
                <Button
                  text="Create"
                  icon={PlusIcon}
                  className={styles.create}
                  onClick={abc}
                />
              </div>
            )}

            <input
              type="text"
              placeholder="Search title.."
              defaultValue={search.join(" ")}
              onChange={(e) =>
                setSearch(
                  e.target.value.trim() ? e.target.value.trim().split(" ") : []
                )
              }
            />
          </div>

          <div className={styles.container_body}>
            <ul className={styles.list}>
              {searchedLink.map((file) =>
                selectedCard.includes(file.id) ? (
                  <SelectedCard
                    key={file.id}
                    {...file}
                    onClick={() => onSelected(file.id)}
                  />
                ) : (
                  <Card
                    key={file.id}
                    {...file}
                    onClick={() => onSelected(file.id)}
                  />
                )
              )}
            </ul>
          </div>
        {selectedMode && (
          <div className={styles.counter}>{selectedCard.length}</div>
        )}
        </div>
      </>
    </Layout>
  );
};

export default Home;
